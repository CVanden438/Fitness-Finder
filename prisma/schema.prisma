generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Class {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  capacity    Int
  category    String
  date        String
  difficulty  String
  duration    Int
  price       Int
  time        String
  title       String
  description String
  participant Participant[]
  host        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Participant {
  userId  String
  classId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@id([userId, classId])
  @@index([userId])
  @@index([classId])
}

model Task {
  id        String  @id @default(cuid())
  userId    String
  name      String
  completed Boolean
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          String?       @default("user")
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  classes       Class[]
  participant   Participant[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
